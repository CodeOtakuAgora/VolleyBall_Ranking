<?php// class User qui définit toute les charactéristiques d'un user avec pleins de fonctions// qui le définissent et qui lui sont propres// récupère et donc à accès à toutes les fonction de sa class mère (Db)class Matchs extends Bdd{    // fonction publique (visible et utilisable partout dans le projet)    // statique (qui garde la meme signature partout dans le projet)    // qui retourne tous les users trier par id    public static function getAllMatchs()    {        return Bdd::getInstance()->conn->query('SELECT * FROM `volley_matchs`');    }    public static function getSpecificMatchs($id)    {        return Bdd::getInstance()->conn->query('SELECT * FROM `volley_matchs` WHERE id_equipe1 = "' . $id . '"');    }    // fonction publique (visible et utilisable partout dans le projet)    // statique (qui garde la meme signature partout dans le projet)    // qui retourne toutes les catégories ou l'id est égale à l'id passé en parametre    public static function getMatchs($id, $year)    {        return Bdd::getInstance()->conn->query('SELECT * FROM `volley_matchs` WHERE             `id` = "' . $id . '" AND annee = "' . $year . '"')->fetchAll();    }    public static function getJoinMatchStats()    {        return Bdd::getInstance()->conn->query('SELECT *, volley_matchs.id_equipe1 as theId,  volley_matchs.id as myId FROM `volley_matchs` INNER JOIN volley_equipes             ON volley_matchs.id_equipe1 = volley_equipes.id where annee = 2018 ORDER BY id_equipe1');    }    public static function getJoinMatchStatsBy2018()    {        return Bdd::getInstance()->conn->query('SELECT *, volley_matchs.id_equipe1 as theId,  volley_matchs.id as myId FROM `volley_matchs` INNER JOIN volley_equipes             ON volley_matchs.id_equipe1 = volley_equipes.id WHERE annee = 2018 ORDER BY id_equipe1');    }    public static function getJoinMatchStatsBy2019()    {        return Bdd::getInstance()->conn->query('SELECT *, volley_matchs.id_equipe1 as theId,  volley_matchs.id as myId FROM `volley_matchs` INNER JOIN volley_equipes             ON volley_matchs.id_equipe1 = volley_equipes.id WHERE annee = 2019 ORDER BY id_equipe1');    }    public static function getJoinMatchStatsBy2020()    {        return Bdd::getInstance()->conn->query('SELECT *, volley_matchs.id_equipe1 as theId,  volley_matchs.id as myId FROM `volley_matchs` INNER JOIN volley_equipes             ON volley_matchs.id_equipe1 = volley_equipes.id WHERE annee = 2020 ORDER BY id_equipe1');    }    public static function getTeam1Matchs($id, $year)    {        return Bdd::getInstance()->conn->query('SELECT * FROM `volley_matchs` INNER JOIN volley_equipes             ON volley_matchs.id_equipe1 = volley_equipes.id WHERE id_equipe1 = "' . $id . '"            AND annee = "' . $year . '"');    }    public static function getTeam2Matchs($id, $year)    {        return Bdd::getInstance()->conn->query('SELECT * FROM `volley_matchs` INNER JOIN volley_equipes             ON volley_matchs.id_equipe2 = volley_equipes.id WHERE id_equipe1 = "' . $id . '"             AND annee = "' . $year . '"');    }    // fonction publique (visible et utilisable partout dans le projet)     // statique (qui garde la meme signature partout dans le projet)    // qui retourne les categories qui viennent d'etre créer une fois la requete executé    public static function setMatchs($id1, $id2, $res, $nb_sets, $score, $nb_points, $penalite,         $annee)     {        $sql = "INSERT INTO `volley_matchs` (id_equipe1, id_equipe2, resultat, sets, scores, points, penalites, annee) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";        $stmt = Bdd::getInstance()->conn->prepare($sql);        $stmt->execute([            $id1,            $id2,            $res,            $nb_sets,            $score,            $nb_points,            $penalite,            $annee        ]);        return Matchs::getAllMatchs();    }    // fonction publique (visible et utilisable partout dans le projet)    // statique (qui garde la meme signature partout dans le projet)    // qui retourne le user dont les informations    // viennent d'etre mise à jour une fois la requete executé    public static function updateMatchs($id1, $id2, $res, $set, $score, $points, $penalite,         $year, $id)    {        $sql = "UPDATE `volley_matchs` SET `id_equipe1` = ?, `id_equipe2` = ?, `resultat` = ?, `sets` = ?, `scores` = ?, `points` = ?, `penalites` = ?, `annee` = ?              WHERE `id` = ?";        $stmt = Bdd::getInstance()->conn->prepare($sql);        $stmt->execute([            $id1,            $id2,            $res,            $set,            $score,            $points,            $penalite,            $year,            $id        ]);        return Matchs::getMatchs($id, $year);    }}/*SELECT *, v1.nom as equipe1, v2.nom as equipe2 FROM `volley_matchs`    INNER JOIN volley_equipes v1    ON volley_matchs.id_equipe1 = v1.id    INNER JOIN volley_equipes v2    ON volley_matchs.id_equipe2 = v2.id     WHERE id_equipe1 = 1 AND id_equipe2 = 9*/?>